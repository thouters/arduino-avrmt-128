HOW TO BUILD ARDUINO ON YOUR FAVORITE PLATFORM

With frequently asked questions, scroll to the end of the file.


////////////////////////////////////////////////////////////////////

//// Steps for First Time Setup 


1. INSTALL DEVELOPMENT TOOLS

1a. On Windows, install Cygwin. It's downloadable from 
    www.cygwin.com or specifically: www.cygwin.com/setup.exe

** of the packages, begin with the defaults, and add:

+ svn - used for version control

+ make, gcc-mingw, and g++ - used to build arduino.exe
  (this will also pull in gcc-core)

+ perl - use this version, activestate or other distros have trouble
  
+ unzip, zip - for dealing with archives

+ included in the defaults, but make sure:
  coreutils (or textutils), gzip, tar

+ not required but useful: 
  openssh - command line ssh client
  nano - handy/simple text editor

** and be sure to leave the option selected for 'unix line endings' 

the cygwin installer is sometimes a little flakey, so it may take more 
than one try to get everything in there. in fact, it's often best to
run the installer once, and let it install all its defaults, then run 
it again, and select the items above. it's also useful to run the 
installer every few months to keep things fresh.


1b. On Mac OS X, install Apple's Developer Tools. Should work with 
    everything from the December 2002 Tools for Jaguar on OS X 10.2, 
    up through the more recent Xcode stuff. 


1c. On Linux, you're pretty much on your own.. You need jikes (or
    edit make.sh to use a different compiler), java, avr-gcc, make,
    and subversion.  You'll also have to set some environment
    variables (see make.sh for details).


2. GRAB THE CODE FROM BERLIOS

* this grabs the code as an anonymous user. 

# grab the code, it'll take a while
svn co svn://svn.berlios.de/arduino/trunk
# (maybe even a long while for you dialup and international folks)


3. BUILD IT

# now to build for the first time:
cd /path/to/arduino/build/windows

# or if you're on linux
cd /path/to/arduino/build/linux

# for the followers of goatee man
cd /path/to/arduino/build/macosx

# and then..
./make.sh

# if everything went well, you'll have no errors. (feel free to make
# suggestions for things to include here for common problems)

# then to run it
./run.sh

# each time you make a change, use make to build the thing 
# and run to get it up and running. 


////////////////////////////////////////////////////////////////////

//// Updating to the Latest Version


4a. Each time you want to update to latest version from cvs:

cd /path/to/arduino
svn update


4b. If new folders have been added, or you're gettin odd errors, use:

# remove the work directory
rm -rf work


////////////////////////////////////////////////////////////////////

//// Frequently Asked Questions

- What about eclipse? What about ant? The command line is frightening
  and gives me nightmares!

In a basic sense, the command line stuff isn't as scary as it might 
seem. Hopefully it's just a matter of following the instructions 
above (and being patient). If not, let us know where you have trouble
so we can fix things.

Conceivably, it wouldn't take much to make Arduino build under
Eclipse or any other IDE, but we don't do it by default. Same goes for 
ANT. We don't use it, but if someone were to make build scripts that 
emulated everything that the current build scripts do (not just build
the code, but all the other annoying crap that the build scripts do) 
then maybe we could switch to it. It's all about reaching some kind 
of critical mass. 

$Id$
